// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to the namespaced libjpeg 12-bit
class Jpeg12Native {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Jpeg12Native(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Jpeg12Native.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<jpeg12_error_mgr> jpeg12_std_error(
    ffi.Pointer<jpeg12_error_mgr> err,
  ) {
    return _jpeg12_std_error(
      err,
    );
  }

  late final _jpeg12_std_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<jpeg12_error_mgr> Function(
              ffi.Pointer<jpeg12_error_mgr>)>>('jpeg12_std_error');
  late final _jpeg12_std_error = _jpeg12_std_errorPtr.asFunction<
      ffi.Pointer<jpeg12_error_mgr> Function(ffi.Pointer<jpeg12_error_mgr>)>();

  void jpeg12_CreateCompress(
    j12_compress_ptr cinfo,
    int version,
    int structsize,
  ) {
    return _jpeg12_CreateCompress(
      cinfo,
      version,
      structsize,
    );
  }

  late final _jpeg12_CreateCompressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              j12_compress_ptr, ffi.Int, ffi.Int)>>('jpeg12_CreateCompress');
  late final _jpeg12_CreateCompress = _jpeg12_CreateCompressPtr
      .asFunction<void Function(j12_compress_ptr, int, int)>();

  void jpeg12_CreateDecompress(
    j12_decompress_ptr cinfo,
    int version,
    int structsize,
  ) {
    return _jpeg12_CreateDecompress(
      cinfo,
      version,
      structsize,
    );
  }

  late final _jpeg12_CreateDecompressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(j12_decompress_ptr, ffi.Int,
              ffi.Int)>>('jpeg12_CreateDecompress');
  late final _jpeg12_CreateDecompress = _jpeg12_CreateDecompressPtr
      .asFunction<void Function(j12_decompress_ptr, int, int)>();

  void jpeg12_destroy_compress(
    j12_compress_ptr cinfo,
  ) {
    return _jpeg12_destroy_compress(
      cinfo,
    );
  }

  late final _jpeg12_destroy_compressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(j12_compress_ptr)>>(
          'jpeg12_destroy_compress');
  late final _jpeg12_destroy_compress =
      _jpeg12_destroy_compressPtr.asFunction<void Function(j12_compress_ptr)>();

  void jpeg12_destroy_decompress(
    j12_decompress_ptr cinfo,
  ) {
    return _jpeg12_destroy_decompress(
      cinfo,
    );
  }

  late final _jpeg12_destroy_decompressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(j12_decompress_ptr)>>(
          'jpeg12_destroy_decompress');
  late final _jpeg12_destroy_decompress = _jpeg12_destroy_decompressPtr
      .asFunction<void Function(j12_decompress_ptr)>();

  void jpeg12_stdio_dest(
    j12_compress_ptr cinfo,
    ffi.Pointer<ffi.Int> outfile,
  ) {
    return _jpeg12_stdio_dest(
      cinfo,
      outfile,
    );
  }

  late final _jpeg12_stdio_destPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              j12_compress_ptr, ffi.Pointer<ffi.Int>)>>('jpeg12_stdio_dest');
  late final _jpeg12_stdio_dest = _jpeg12_stdio_destPtr
      .asFunction<void Function(j12_compress_ptr, ffi.Pointer<ffi.Int>)>();

  void jpeg12_stdio_src(
    j12_decompress_ptr cinfo,
    ffi.Pointer<ffi.Int> infile,
  ) {
    return _jpeg12_stdio_src(
      cinfo,
      infile,
    );
  }

  late final _jpeg12_stdio_srcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              j12_decompress_ptr, ffi.Pointer<ffi.Int>)>>('jpeg12_stdio_src');
  late final _jpeg12_stdio_src = _jpeg12_stdio_srcPtr
      .asFunction<void Function(j12_decompress_ptr, ffi.Pointer<ffi.Int>)>();

  void jpeg12_mem_dest(
    j12_compress_ptr cinfo,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> outbuffer,
    ffi.Pointer<ffi.UnsignedLong> outsize,
  ) {
    return _jpeg12_mem_dest(
      cinfo,
      outbuffer,
      outsize,
    );
  }

  late final _jpeg12_mem_destPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              j12_compress_ptr,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.UnsignedLong>)>>('jpeg12_mem_dest');
  late final _jpeg12_mem_dest = _jpeg12_mem_destPtr.asFunction<
      void Function(
          j12_compress_ptr,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.UnsignedLong>)>();

  void jpeg12_mem_src(
    j12_decompress_ptr cinfo,
    ffi.Pointer<ffi.UnsignedChar> inbuffer,
    int insize,
  ) {
    return _jpeg12_mem_src(
      cinfo,
      inbuffer,
      insize,
    );
  }

  late final _jpeg12_mem_srcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(j12_decompress_ptr, ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedLong)>>('jpeg12_mem_src');
  late final _jpeg12_mem_src = _jpeg12_mem_srcPtr.asFunction<
      void Function(j12_decompress_ptr, ffi.Pointer<ffi.UnsignedChar>, int)>();

  void jpeg12_set_defaults(
    j12_compress_ptr cinfo,
  ) {
    return _jpeg12_set_defaults(
      cinfo,
    );
  }

  late final _jpeg12_set_defaultsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(j12_compress_ptr)>>(
          'jpeg12_set_defaults');
  late final _jpeg12_set_defaults =
      _jpeg12_set_defaultsPtr.asFunction<void Function(j12_compress_ptr)>();

  void jpeg12_set_colorspace(
    j12_compress_ptr cinfo,
    int colorspace,
  ) {
    return _jpeg12_set_colorspace(
      cinfo,
      colorspace,
    );
  }

  late final _jpeg12_set_colorspacePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(j12_compress_ptr, ffi.Int32)>>(
      'jpeg12_set_colorspace');
  late final _jpeg12_set_colorspace = _jpeg12_set_colorspacePtr
      .asFunction<void Function(j12_compress_ptr, int)>();

  void jpeg12_default_colorspace(
    j12_compress_ptr cinfo,
  ) {
    return _jpeg12_default_colorspace(
      cinfo,
    );
  }

  late final _jpeg12_default_colorspacePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(j12_compress_ptr)>>(
          'jpeg12_default_colorspace');
  late final _jpeg12_default_colorspace = _jpeg12_default_colorspacePtr
      .asFunction<void Function(j12_compress_ptr)>();

  void jpeg12_set_quality(
    j12_compress_ptr cinfo,
    int quality,
    int force_baseline,
  ) {
    return _jpeg12_set_quality(
      cinfo,
      quality,
      force_baseline,
    );
  }

  late final _jpeg12_set_qualityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              j12_compress_ptr, ffi.Int, ffi.Int32)>>('jpeg12_set_quality');
  late final _jpeg12_set_quality = _jpeg12_set_qualityPtr
      .asFunction<void Function(j12_compress_ptr, int, int)>();

  void jpeg12_set_linear_quality(
    j12_compress_ptr cinfo,
    int scale_factor,
    int force_baseline,
  ) {
    return _jpeg12_set_linear_quality(
      cinfo,
      scale_factor,
      force_baseline,
    );
  }

  late final _jpeg12_set_linear_qualityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(j12_compress_ptr, ffi.Int,
              ffi.Int32)>>('jpeg12_set_linear_quality');
  late final _jpeg12_set_linear_quality = _jpeg12_set_linear_qualityPtr
      .asFunction<void Function(j12_compress_ptr, int, int)>();

  void jpeg12_default_qtables(
    j12_compress_ptr cinfo,
    int force_baseline,
  ) {
    return _jpeg12_default_qtables(
      cinfo,
      force_baseline,
    );
  }

  late final _jpeg12_default_qtablesPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(j12_compress_ptr, ffi.Int32)>>(
      'jpeg12_default_qtables');
  late final _jpeg12_default_qtables = _jpeg12_default_qtablesPtr
      .asFunction<void Function(j12_compress_ptr, int)>();

  void jpeg12_add_quant_table(
    j12_compress_ptr cinfo,
    int which_tbl,
    ffi.Pointer<ffi.UnsignedInt> basic_table,
    int scale_factor,
    int force_baseline,
  ) {
    return _jpeg12_add_quant_table(
      cinfo,
      which_tbl,
      basic_table,
      scale_factor,
      force_baseline,
    );
  }

  late final _jpeg12_add_quant_tablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              j12_compress_ptr,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Int,
              ffi.Int32)>>('jpeg12_add_quant_table');
  late final _jpeg12_add_quant_table = _jpeg12_add_quant_tablePtr.asFunction<
      void Function(
          j12_compress_ptr, int, ffi.Pointer<ffi.UnsignedInt>, int, int)>();

  int jpeg12_quality_scaling(
    int quality,
  ) {
    return _jpeg12_quality_scaling(
      quality,
    );
  }

  late final _jpeg12_quality_scalingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'jpeg12_quality_scaling');
  late final _jpeg12_quality_scaling =
      _jpeg12_quality_scalingPtr.asFunction<int Function(int)>();

  void jpeg12_simple_progression(
    j12_compress_ptr cinfo,
  ) {
    return _jpeg12_simple_progression(
      cinfo,
    );
  }

  late final _jpeg12_simple_progressionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(j12_compress_ptr)>>(
          'jpeg12_simple_progression');
  late final _jpeg12_simple_progression = _jpeg12_simple_progressionPtr
      .asFunction<void Function(j12_compress_ptr)>();

  void jpeg12_suppress_tables(
    j12_compress_ptr cinfo,
    int suppress,
  ) {
    return _jpeg12_suppress_tables(
      cinfo,
      suppress,
    );
  }

  late final _jpeg12_suppress_tablesPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(j12_compress_ptr, ffi.Int32)>>(
      'jpeg12_suppress_tables');
  late final _jpeg12_suppress_tables = _jpeg12_suppress_tablesPtr
      .asFunction<void Function(j12_compress_ptr, int)>();

  ffi.Pointer<JQUANT_TBL> jpeg12_alloc_quant_table(
    j12_common_ptr cinfo,
  ) {
    return _jpeg12_alloc_quant_table(
      cinfo,
    );
  }

  late final _jpeg12_alloc_quant_tablePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<JQUANT_TBL> Function(j12_common_ptr)>>(
      'jpeg12_alloc_quant_table');
  late final _jpeg12_alloc_quant_table = _jpeg12_alloc_quant_tablePtr
      .asFunction<ffi.Pointer<JQUANT_TBL> Function(j12_common_ptr)>();

  ffi.Pointer<JHUFF_TBL> jpeg12_alloc_huff_table(
    j12_common_ptr cinfo,
  ) {
    return _jpeg12_alloc_huff_table(
      cinfo,
    );
  }

  late final _jpeg12_alloc_huff_tablePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<JHUFF_TBL> Function(j12_common_ptr)>>(
      'jpeg12_alloc_huff_table');
  late final _jpeg12_alloc_huff_table = _jpeg12_alloc_huff_tablePtr
      .asFunction<ffi.Pointer<JHUFF_TBL> Function(j12_common_ptr)>();

  void jpeg12_start_compress(
    j12_compress_ptr cinfo,
    int write_all_tables,
  ) {
    return _jpeg12_start_compress(
      cinfo,
      write_all_tables,
    );
  }

  late final _jpeg12_start_compressPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(j12_compress_ptr, ffi.Int32)>>(
      'jpeg12_start_compress');
  late final _jpeg12_start_compress = _jpeg12_start_compressPtr
      .asFunction<void Function(j12_compress_ptr, int)>();

  int jpeg12_write_scanlines(
    j12_compress_ptr cinfo,
    JSAMPARRAY scanlines,
    int num_lines,
  ) {
    return _jpeg12_write_scanlines(
      cinfo,
      scanlines,
      num_lines,
    );
  }

  late final _jpeg12_write_scanlinesPtr = _lookup<
      ffi.NativeFunction<
          JDIMENSION Function(j12_compress_ptr, JSAMPARRAY,
              JDIMENSION)>>('jpeg12_write_scanlines');
  late final _jpeg12_write_scanlines = _jpeg12_write_scanlinesPtr
      .asFunction<int Function(j12_compress_ptr, JSAMPARRAY, int)>();

  void jpeg12_finish_compress(
    j12_compress_ptr cinfo,
  ) {
    return _jpeg12_finish_compress(
      cinfo,
    );
  }

  late final _jpeg12_finish_compressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(j12_compress_ptr)>>(
          'jpeg12_finish_compress');
  late final _jpeg12_finish_compress =
      _jpeg12_finish_compressPtr.asFunction<void Function(j12_compress_ptr)>();

  void jpeg12_calc_jpeg12_dimensions(
    j12_compress_ptr cinfo,
  ) {
    return _jpeg12_calc_jpeg12_dimensions(
      cinfo,
    );
  }

  late final _jpeg12_calc_jpeg12_dimensionsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(j12_compress_ptr)>>(
          'jpeg12_calc_jpeg12_dimensions');
  late final _jpeg12_calc_jpeg12_dimensions = _jpeg12_calc_jpeg12_dimensionsPtr
      .asFunction<void Function(j12_compress_ptr)>();

  int jpeg12_write_raw_data(
    j12_compress_ptr cinfo,
    JSAMPIMAGE data,
    int num_lines,
  ) {
    return _jpeg12_write_raw_data(
      cinfo,
      data,
      num_lines,
    );
  }

  late final _jpeg12_write_raw_dataPtr = _lookup<
      ffi.NativeFunction<
          JDIMENSION Function(j12_compress_ptr, JSAMPIMAGE,
              JDIMENSION)>>('jpeg12_write_raw_data');
  late final _jpeg12_write_raw_data = _jpeg12_write_raw_dataPtr
      .asFunction<int Function(j12_compress_ptr, JSAMPIMAGE, int)>();

  void jpeg12_write_marker(
    j12_compress_ptr cinfo,
    int marker,
    ffi.Pointer<JOCTET> dataptr,
    int datalen,
  ) {
    return _jpeg12_write_marker(
      cinfo,
      marker,
      dataptr,
      datalen,
    );
  }

  late final _jpeg12_write_markerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(j12_compress_ptr, ffi.Int, ffi.Pointer<JOCTET>,
              ffi.UnsignedInt)>>('jpeg12_write_marker');
  late final _jpeg12_write_marker = _jpeg12_write_markerPtr.asFunction<
      void Function(j12_compress_ptr, int, ffi.Pointer<JOCTET>, int)>();

  void jpeg12_write_m_header(
    j12_compress_ptr cinfo,
    int marker,
    int datalen,
  ) {
    return _jpeg12_write_m_header(
      cinfo,
      marker,
      datalen,
    );
  }

  late final _jpeg12_write_m_headerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(j12_compress_ptr, ffi.Int,
              ffi.UnsignedInt)>>('jpeg12_write_m_header');
  late final _jpeg12_write_m_header = _jpeg12_write_m_headerPtr
      .asFunction<void Function(j12_compress_ptr, int, int)>();

  void jpeg12_write_m_byte(
    j12_compress_ptr cinfo,
    int val,
  ) {
    return _jpeg12_write_m_byte(
      cinfo,
      val,
    );
  }

  late final _jpeg12_write_m_bytePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(j12_compress_ptr, ffi.Int)>>(
          'jpeg12_write_m_byte');
  late final _jpeg12_write_m_byte = _jpeg12_write_m_bytePtr
      .asFunction<void Function(j12_compress_ptr, int)>();

  void jpeg12_write_tables(
    j12_compress_ptr cinfo,
  ) {
    return _jpeg12_write_tables(
      cinfo,
    );
  }

  late final _jpeg12_write_tablesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(j12_compress_ptr)>>(
          'jpeg12_write_tables');
  late final _jpeg12_write_tables =
      _jpeg12_write_tablesPtr.asFunction<void Function(j12_compress_ptr)>();

  int jpeg12_read_header(
    j12_decompress_ptr cinfo,
    int require_image,
  ) {
    return _jpeg12_read_header(
      cinfo,
      require_image,
    );
  }

  late final _jpeg12_read_headerPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(j12_decompress_ptr, ffi.Int32)>>(
      'jpeg12_read_header');
  late final _jpeg12_read_header = _jpeg12_read_headerPtr
      .asFunction<int Function(j12_decompress_ptr, int)>();

  int jpeg12_start_decompress(
    j12_decompress_ptr cinfo,
  ) {
    return _jpeg12_start_decompress(
      cinfo,
    );
  }

  late final _jpeg12_start_decompressPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(j12_decompress_ptr)>>(
          'jpeg12_start_decompress');
  late final _jpeg12_start_decompress = _jpeg12_start_decompressPtr
      .asFunction<int Function(j12_decompress_ptr)>();

  int jpeg12_read_scanlines(
    j12_decompress_ptr cinfo,
    JSAMPARRAY scanlines,
    int max_lines,
  ) {
    return _jpeg12_read_scanlines(
      cinfo,
      scanlines,
      max_lines,
    );
  }

  late final _jpeg12_read_scanlinesPtr = _lookup<
      ffi.NativeFunction<
          JDIMENSION Function(j12_decompress_ptr, JSAMPARRAY,
              JDIMENSION)>>('jpeg12_read_scanlines');
  late final _jpeg12_read_scanlines = _jpeg12_read_scanlinesPtr
      .asFunction<int Function(j12_decompress_ptr, JSAMPARRAY, int)>();

  int jpeg12_finish_decompress(
    j12_decompress_ptr cinfo,
  ) {
    return _jpeg12_finish_decompress(
      cinfo,
    );
  }

  late final _jpeg12_finish_decompressPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(j12_decompress_ptr)>>(
          'jpeg12_finish_decompress');
  late final _jpeg12_finish_decompress = _jpeg12_finish_decompressPtr
      .asFunction<int Function(j12_decompress_ptr)>();

  int jpeg12_read_raw_data(
    j12_decompress_ptr cinfo,
    JSAMPIMAGE data,
    int max_lines,
  ) {
    return _jpeg12_read_raw_data(
      cinfo,
      data,
      max_lines,
    );
  }

  late final _jpeg12_read_raw_dataPtr = _lookup<
      ffi.NativeFunction<
          JDIMENSION Function(j12_decompress_ptr, JSAMPIMAGE,
              JDIMENSION)>>('jpeg12_read_raw_data');
  late final _jpeg12_read_raw_data = _jpeg12_read_raw_dataPtr
      .asFunction<int Function(j12_decompress_ptr, JSAMPIMAGE, int)>();

  int jpeg12_has_multiple_scans(
    j12_decompress_ptr cinfo,
  ) {
    return _jpeg12_has_multiple_scans(
      cinfo,
    );
  }

  late final _jpeg12_has_multiple_scansPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(j12_decompress_ptr)>>(
          'jpeg12_has_multiple_scans');
  late final _jpeg12_has_multiple_scans = _jpeg12_has_multiple_scansPtr
      .asFunction<int Function(j12_decompress_ptr)>();

  int jpeg12_j12_start_output(
    j12_decompress_ptr cinfo,
    int scan_number,
  ) {
    return _jpeg12_j12_start_output(
      cinfo,
      scan_number,
    );
  }

  late final _jpeg12_j12_start_outputPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(j12_decompress_ptr, ffi.Int)>>(
      'jpeg12_j12_start_output');
  late final _jpeg12_j12_start_output = _jpeg12_j12_start_outputPtr
      .asFunction<int Function(j12_decompress_ptr, int)>();

  int jpeg12_j12_finish_output(
    j12_decompress_ptr cinfo,
  ) {
    return _jpeg12_j12_finish_output(
      cinfo,
    );
  }

  late final _jpeg12_j12_finish_outputPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(j12_decompress_ptr)>>(
          'jpeg12_j12_finish_output');
  late final _jpeg12_j12_finish_output = _jpeg12_j12_finish_outputPtr
      .asFunction<int Function(j12_decompress_ptr)>();

  int jpeg12_input_complete(
    j12_decompress_ptr cinfo,
  ) {
    return _jpeg12_input_complete(
      cinfo,
    );
  }

  late final _jpeg12_input_completePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(j12_decompress_ptr)>>(
          'jpeg12_input_complete');
  late final _jpeg12_input_complete =
      _jpeg12_input_completePtr.asFunction<int Function(j12_decompress_ptr)>();

  void jpeg12_new_colormap(
    j12_decompress_ptr cinfo,
  ) {
    return _jpeg12_new_colormap(
      cinfo,
    );
  }

  late final _jpeg12_new_colormapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(j12_decompress_ptr)>>(
          'jpeg12_new_colormap');
  late final _jpeg12_new_colormap =
      _jpeg12_new_colormapPtr.asFunction<void Function(j12_decompress_ptr)>();

  int jpeg12_j12_consume_input(
    j12_decompress_ptr cinfo,
  ) {
    return _jpeg12_j12_consume_input(
      cinfo,
    );
  }

  late final _jpeg12_j12_consume_inputPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(j12_decompress_ptr)>>(
          'jpeg12_j12_consume_input');
  late final _jpeg12_j12_consume_input = _jpeg12_j12_consume_inputPtr
      .asFunction<int Function(j12_decompress_ptr)>();

  void jpeg12_core_output_dimensions(
    j12_decompress_ptr cinfo,
  ) {
    return _jpeg12_core_output_dimensions(
      cinfo,
    );
  }

  late final _jpeg12_core_output_dimensionsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(j12_decompress_ptr)>>(
          'jpeg12_core_output_dimensions');
  late final _jpeg12_core_output_dimensions = _jpeg12_core_output_dimensionsPtr
      .asFunction<void Function(j12_decompress_ptr)>();

  void jpeg12_calc_output_dimensions(
    j12_decompress_ptr cinfo,
  ) {
    return _jpeg12_calc_output_dimensions(
      cinfo,
    );
  }

  late final _jpeg12_calc_output_dimensionsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(j12_decompress_ptr)>>(
          'jpeg12_calc_output_dimensions');
  late final _jpeg12_calc_output_dimensions = _jpeg12_calc_output_dimensionsPtr
      .asFunction<void Function(j12_decompress_ptr)>();

  void jpeg12_save_markers(
    j12_decompress_ptr cinfo,
    int marker_code,
    int length_limit,
  ) {
    return _jpeg12_save_markers(
      cinfo,
      marker_code,
      length_limit,
    );
  }

  late final _jpeg12_save_markersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(j12_decompress_ptr, ffi.Int,
              ffi.UnsignedInt)>>('jpeg12_save_markers');
  late final _jpeg12_save_markers = _jpeg12_save_markersPtr
      .asFunction<void Function(j12_decompress_ptr, int, int)>();

  void jpeg12_set_marker_processor(
    j12_decompress_ptr cinfo,
    int marker_code,
    jpeg12_marker_parser_method routine,
  ) {
    return _jpeg12_set_marker_processor(
      cinfo,
      marker_code,
      routine,
    );
  }

  late final _jpeg12_set_marker_processorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(j12_decompress_ptr, ffi.Int,
              jpeg12_marker_parser_method)>>('jpeg12_set_marker_processor');
  late final _jpeg12_set_marker_processor =
      _jpeg12_set_marker_processorPtr.asFunction<
          void Function(
              j12_decompress_ptr, int, jpeg12_marker_parser_method)>();

  ffi.Pointer<jvirt_barray_ptr> jpeg12_read_coefficients(
    j12_decompress_ptr cinfo,
  ) {
    return _jpeg12_read_coefficients(
      cinfo,
    );
  }

  late final _jpeg12_read_coefficientsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<jvirt_barray_ptr> Function(
              j12_decompress_ptr)>>('jpeg12_read_coefficients');
  late final _jpeg12_read_coefficients = _jpeg12_read_coefficientsPtr
      .asFunction<ffi.Pointer<jvirt_barray_ptr> Function(j12_decompress_ptr)>();

  void jpeg12_write_coefficients(
    j12_compress_ptr cinfo,
    ffi.Pointer<jvirt_barray_ptr> coef_arrays,
  ) {
    return _jpeg12_write_coefficients(
      cinfo,
      coef_arrays,
    );
  }

  late final _jpeg12_write_coefficientsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(j12_compress_ptr,
              ffi.Pointer<jvirt_barray_ptr>)>>('jpeg12_write_coefficients');
  late final _jpeg12_write_coefficients =
      _jpeg12_write_coefficientsPtr.asFunction<
          void Function(j12_compress_ptr, ffi.Pointer<jvirt_barray_ptr>)>();

  void jpeg12_copy_critical_parameters(
    j12_decompress_ptr srcinfo,
    j12_compress_ptr dstinfo,
  ) {
    return _jpeg12_copy_critical_parameters(
      srcinfo,
      dstinfo,
    );
  }

  late final _jpeg12_copy_critical_parametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(j12_decompress_ptr,
              j12_compress_ptr)>>('jpeg12_copy_critical_parameters');
  late final _jpeg12_copy_critical_parameters =
      _jpeg12_copy_critical_parametersPtr
          .asFunction<void Function(j12_decompress_ptr, j12_compress_ptr)>();

  void jpeg12_abort_compress(
    j12_compress_ptr cinfo,
  ) {
    return _jpeg12_abort_compress(
      cinfo,
    );
  }

  late final _jpeg12_abort_compressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(j12_compress_ptr)>>(
          'jpeg12_abort_compress');
  late final _jpeg12_abort_compress =
      _jpeg12_abort_compressPtr.asFunction<void Function(j12_compress_ptr)>();

  void jpeg12_abort_decompress(
    j12_decompress_ptr cinfo,
  ) {
    return _jpeg12_abort_decompress(
      cinfo,
    );
  }

  late final _jpeg12_abort_decompressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(j12_decompress_ptr)>>(
          'jpeg12_abort_decompress');
  late final _jpeg12_abort_decompress = _jpeg12_abort_decompressPtr
      .asFunction<void Function(j12_decompress_ptr)>();

  void jpeg12_abort(
    j12_common_ptr cinfo,
  ) {
    return _jpeg12_abort(
      cinfo,
    );
  }

  late final _jpeg12_abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(j12_common_ptr)>>(
          'jpeg12_abort');
  late final _jpeg12_abort =
      _jpeg12_abortPtr.asFunction<void Function(j12_common_ptr)>();

  void jpeg12_destroy(
    j12_common_ptr cinfo,
  ) {
    return _jpeg12_destroy(
      cinfo,
    );
  }

  late final _jpeg12_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(j12_common_ptr)>>(
          'jpeg12_destroy');
  late final _jpeg12_destroy =
      _jpeg12_destroyPtr.asFunction<void Function(j12_common_ptr)>();

  int jpeg12_j12_resync_to_restart(
    j12_decompress_ptr cinfo,
    int desired,
  ) {
    return _jpeg12_j12_resync_to_restart(
      cinfo,
      desired,
    );
  }

  late final _jpeg12_j12_resync_to_restartPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(j12_decompress_ptr, ffi.Int)>>(
      'jpeg12_j12_resync_to_restart');
  late final _jpeg12_j12_resync_to_restart = _jpeg12_j12_resync_to_restartPtr
      .asFunction<int Function(j12_decompress_ptr, int)>();
}

abstract class boolean {
  static const int FALSE = 0;
  static const int TRUE = 1;
}

class JQUANT_TBL extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<UINT16> quantval;

  @ffi.Int32()
  external int sent_table;
}

typedef UINT16 = ffi.UnsignedShort;

class JHUFF_TBL extends ffi.Struct {
  @ffi.Array.multi([17])
  external ffi.Array<UINT8> bits;

  @ffi.Array.multi([256])
  external ffi.Array<UINT8> huffval;

  @ffi.Int32()
  external int sent_table;
}

typedef UINT8 = ffi.UnsignedChar;

class jpeg12_component_info extends ffi.Struct {
  @ffi.Int()
  external int component_id;

  @ffi.Int()
  external int component_index;

  @ffi.Int()
  external int h_samp_factor;

  @ffi.Int()
  external int v_samp_factor;

  @ffi.Int()
  external int quant_tbl_no;

  @ffi.Int()
  external int dc_tbl_no;

  @ffi.Int()
  external int ac_tbl_no;

  @JDIMENSION()
  external int width_in_blocks;

  @JDIMENSION()
  external int height_in_blocks;

  @ffi.Int()
  external int DCT_h_scaled_size;

  @ffi.Int()
  external int DCT_v_scaled_size;

  @JDIMENSION()
  external int j12_downsampled_width;

  @JDIMENSION()
  external int j12_downsampled_height;

  @ffi.Int32()
  external int component_needed;

  @ffi.Int()
  external int MCU_width;

  @ffi.Int()
  external int MCU_height;

  @ffi.Int()
  external int MCU_blocks;

  @ffi.Int()
  external int MCU_sample_width;

  @ffi.Int()
  external int last_col_width;

  @ffi.Int()
  external int last_row_height;

  external ffi.Pointer<JQUANT_TBL> quant_table;

  external ffi.Pointer<ffi.Void> dct_table;
}

typedef JDIMENSION = ffi.UnsignedInt;

class jpeg12_scan_info extends ffi.Struct {
  @ffi.Int()
  external int comps_in_scan;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int> component_index;

  @ffi.Int()
  external int Ss;

  @ffi.Int()
  external int Se;

  @ffi.Int()
  external int Ah;

  @ffi.Int()
  external int Al;
}

class jpeg12_marker_struct extends ffi.Struct {
  external jpeg12_saved_marker_ptr next;

  @UINT8()
  external int marker;

  @ffi.UnsignedInt()
  external int original_length;

  @ffi.UnsignedInt()
  external int data_length;

  external ffi.Pointer<JOCTET> data;
}

typedef jpeg12_saved_marker_ptr = ffi.Pointer<jpeg12_marker_struct>;
typedef JOCTET = ffi.UnsignedChar;

abstract class J_COLOR_SPACE {
  static const int JCS_UNKNOWN = 0;
  static const int JCS_GRAYSCALE = 1;
  static const int JCS_RGB = 2;
  static const int JCS_YCbCr = 3;
  static const int JCS_CMYK = 4;
  static const int JCS_YCCK = 5;
}

abstract class J_COLOR_TRANSFORM {
  static const int JCT_NONE = 0;
  static const int JCT_SUBTRACT_GREEN = 1;
}

abstract class J_DCT_METHOD {
  static const int JDCT_ISLOW = 0;
  static const int JDCT_IFAST = 1;
  static const int JDCT_FLOAT = 2;
}

abstract class J_DITHER_MODE {
  static const int JDITHER_NONE = 0;
  static const int JDITHER_ORDERED = 1;
  static const int JDITHER_FS = 2;
}

class jpeg12_common_struct extends ffi.Struct {
  external ffi.Pointer<jpeg12_error_mgr> err;

  external ffi.Pointer<jpeg12_memory_mgr> mem;

  external ffi.Pointer<jpeg12_progress_mgr> progress;

  external ffi.Pointer<ffi.Void> client_data;

  @ffi.Int32()
  external int is_decompressor;

  @ffi.Int()
  external int global_state;
}

class jpeg12_error_mgr extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<noreturn_t Function(j12_common_ptr)>>
      j12_error_exit;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(j12_common_ptr, ffi.Int)>>
      j12_emit_message;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(j12_common_ptr)>>
      j12_output_message;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(j12_common_ptr, ffi.Pointer<ffi.Char>)>>
      j12_format_message;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(j12_common_ptr)>>
      j12_reset_error_mgr;

  @ffi.Int()
  external int msg_code;

  external UnnamedUnion1 msg_parm;

  @ffi.Int()
  external int trace_level;

  @ffi.Long()
  external int num_warnings;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> jpeg12_message_table;

  @ffi.Int()
  external int last_jpeg12_message;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> addon_message_table;

  @ffi.Int()
  external int first_addon_message;

  @ffi.Int()
  external int last_addon_message;
}

typedef noreturn_t = ffi.Void;
typedef j12_common_ptr = ffi.Pointer<jpeg12_common_struct>;

class UnnamedUnion1 extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int> i;

  @ffi.Array.multi([80])
  external ffi.Array<ffi.Char> s;
}

class jpeg12_memory_mgr extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(j12_common_ptr, ffi.Int, ffi.Int)>>
      j12_alloc_small;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(j12_common_ptr, ffi.Int, ffi.Int)>>
      j12_alloc_large;

  external ffi.Pointer<
          ffi.NativeFunction<
              JSAMPARRAY Function(
                  j12_common_ptr, ffi.Int, JDIMENSION, JDIMENSION)>>
      j12_alloc_sarray;

  external ffi.Pointer<
          ffi.NativeFunction<
              JBLOCKARRAY Function(
                  j12_common_ptr, ffi.Int, JDIMENSION, JDIMENSION)>>
      j12_alloc_barray;

  external ffi.Pointer<
      ffi.NativeFunction<
          jvirt_sarray_ptr Function(j12_common_ptr, ffi.Int, ffi.Int32,
              JDIMENSION, JDIMENSION, JDIMENSION)>> j12_request_virt_sarray;

  external ffi.Pointer<
      ffi.NativeFunction<
          jvirt_barray_ptr Function(j12_common_ptr, ffi.Int, ffi.Int32,
              JDIMENSION, JDIMENSION, JDIMENSION)>> j12_request_virt_barray;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(j12_common_ptr)>>
      j12_realize_virt_arrays;

  external ffi.Pointer<
      ffi.NativeFunction<
          JSAMPARRAY Function(j12_common_ptr, jvirt_sarray_ptr, JDIMENSION,
              JDIMENSION, ffi.Int32)>> j12_access_virt_sarray;

  external ffi.Pointer<
      ffi.NativeFunction<
          JBLOCKARRAY Function(j12_common_ptr, jvirt_barray_ptr, JDIMENSION,
              JDIMENSION, ffi.Int32)>> j12_access_virt_barray;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(j12_common_ptr, ffi.Int)>>
      j12_free_pool;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(j12_common_ptr)>>
      j12_self_destruct;

  @ffi.Long()
  external int max_memory_to_use;

  @ffi.Long()
  external int max_alloc_chunk;
}

typedef JSAMPARRAY = ffi.Pointer<JSAMPROW>;
typedef JSAMPROW = ffi.Pointer<JSAMPLE>;
typedef JSAMPLE = ffi.Short;
typedef JBLOCKARRAY = ffi.Pointer<JBLOCKROW>;
typedef JBLOCKROW = ffi.Pointer<ffi.Pointer<JCOEF>>;
typedef JCOEF = ffi.Short;
typedef jvirt_sarray_ptr = ffi.Pointer<jvirt_sarray_control>;

class jvirt_sarray_control extends ffi.Opaque {}

typedef jvirt_barray_ptr = ffi.Pointer<jvirt_barray_control>;

class jvirt_barray_control extends ffi.Opaque {}

class jpeg12_progress_mgr extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(j12_common_ptr)>>
      j12_progress_monitor;

  @ffi.Long()
  external int pass_counter;

  @ffi.Long()
  external int pass_limit;

  @ffi.Int()
  external int completed_passes;

  @ffi.Int()
  external int total_passes;
}

class jpeg12_compress_struct extends ffi.Struct {
  external ffi.Pointer<jpeg12_error_mgr> err;

  external ffi.Pointer<jpeg12_memory_mgr> mem;

  external ffi.Pointer<jpeg12_progress_mgr> progress;

  external ffi.Pointer<ffi.Void> client_data;

  @ffi.Int32()
  external int is_decompressor;

  @ffi.Int()
  external int global_state;

  external ffi.Pointer<jpeg12_destination_mgr> dest;

  @JDIMENSION()
  external int image_width;

  @JDIMENSION()
  external int image_height;

  @ffi.Int()
  external int input_components;

  @ffi.Int32()
  external int in_color_space;

  @ffi.Double()
  external double input_gamma;

  @ffi.UnsignedInt()
  external int scale_num;

  @ffi.UnsignedInt()
  external int scale_denom;

  @JDIMENSION()
  external int jpeg12_width;

  @JDIMENSION()
  external int jpeg12_height;

  @ffi.Int()
  external int data_precision;

  @ffi.Int()
  external int num_components;

  @ffi.Int32()
  external int jpeg12_color_space;

  external ffi.Pointer<jpeg12_component_info> comp_info;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<JQUANT_TBL>> quant_tbl_ptrs;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int> q_scale_factor;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<JHUFF_TBL>> dc_huff_tbl_ptrs;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<JHUFF_TBL>> ac_huff_tbl_ptrs;

  @ffi.Array.multi([16])
  external ffi.Array<UINT8> arith_dc_L;

  @ffi.Array.multi([16])
  external ffi.Array<UINT8> arith_dc_U;

  @ffi.Array.multi([16])
  external ffi.Array<UINT8> arith_ac_K;

  @ffi.Int()
  external int num_scans;

  external ffi.Pointer<jpeg12_scan_info> scan_info;

  @ffi.Int32()
  external int raw_data_in;

  @ffi.Int32()
  external int arith_code;

  @ffi.Int32()
  external int optimize_coding;

  @ffi.Int32()
  external int CCIR601_sampling;

  @ffi.Int32()
  external int do_fancy_downsampling;

  @ffi.Int()
  external int smoothing_factor;

  @ffi.Int32()
  external int dct_method;

  @ffi.UnsignedInt()
  external int restart_interval;

  @ffi.Int()
  external int restart_in_rows;

  @ffi.Int32()
  external int write_JFIF_header;

  @UINT8()
  external int JFIF_major_version;

  @UINT8()
  external int JFIF_minor_version;

  @UINT8()
  external int density_unit;

  @UINT16()
  external int X_density;

  @UINT16()
  external int Y_density;

  @ffi.Int32()
  external int write_Adobe_marker;

  @ffi.Int32()
  external int color_transform;

  @JDIMENSION()
  external int next_scanline;

  @ffi.Int32()
  external int progressive_mode;

  @ffi.Int()
  external int max_h_samp_factor;

  @ffi.Int()
  external int max_v_samp_factor;

  @ffi.Int()
  external int min_DCT_h_scaled_size;

  @ffi.Int()
  external int min_DCT_v_scaled_size;

  @JDIMENSION()
  external int total_iMCU_rows;

  @ffi.Int()
  external int comps_in_scan;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<jpeg12_component_info>> cur_comp_info;

  @JDIMENSION()
  external int MCUs_per_row;

  @JDIMENSION()
  external int MCU_rows_in_scan;

  @ffi.Int()
  external int blocks_in_MCU;

  @ffi.Array.multi([10])
  external ffi.Array<ffi.Int> MCU_membership;

  @ffi.Int()
  external int Ss;

  @ffi.Int()
  external int Se;

  @ffi.Int()
  external int Ah;

  @ffi.Int()
  external int Al;

  @ffi.Int()
  external int block_size;

  external ffi.Pointer<ffi.Int> natural_order;

  @ffi.Int()
  external int lim_Se;

  external ffi.Pointer<jpeg12_comp_master> master;

  external ffi.Pointer<jpeg12_c_main_controller> main;

  external ffi.Pointer<jpeg12_c_prep_controller> prep;

  external ffi.Pointer<jpeg12_c_coef_controller> coef;

  external ffi.Pointer<jpeg12_marker_writer> marker;

  external ffi.Pointer<jpeg12_j12_color_converter> cconvert;

  external ffi.Pointer<jpeg12_j12_downsampler> j12_downsample;

  external ffi.Pointer<jpeg12_forward_dct> fdct;

  external ffi.Pointer<jpeg12_entropy_encoder> entropy;

  external ffi.Pointer<jpeg12_scan_info> script_space;

  @ffi.Int()
  external int script_space_size;
}

class jpeg12_destination_mgr extends ffi.Struct {
  external ffi.Pointer<JOCTET> next_output_byte;

  @ffi.Int()
  external int free_in_buffer;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(j12_compress_ptr)>>
      j12_init_destination;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(j12_compress_ptr)>>
      j12_empty_output_buffer;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(j12_compress_ptr)>>
      j12_term_destination;
}

typedef j12_compress_ptr = ffi.Pointer<jpeg12_compress_struct>;

class jpeg12_comp_master extends ffi.Opaque {}

class jpeg12_c_main_controller extends ffi.Opaque {}

class jpeg12_c_prep_controller extends ffi.Opaque {}

class jpeg12_c_coef_controller extends ffi.Opaque {}

class jpeg12_marker_writer extends ffi.Opaque {}

class jpeg12_j12_color_converter extends ffi.Opaque {}

class jpeg12_j12_downsampler extends ffi.Opaque {}

class jpeg12_forward_dct extends ffi.Opaque {}

class jpeg12_entropy_encoder extends ffi.Opaque {}

class jpeg12_decompress_struct extends ffi.Struct {
  external ffi.Pointer<jpeg12_error_mgr> err;

  external ffi.Pointer<jpeg12_memory_mgr> mem;

  external ffi.Pointer<jpeg12_progress_mgr> progress;

  external ffi.Pointer<ffi.Void> client_data;

  @ffi.Int32()
  external int is_decompressor;

  @ffi.Int()
  external int global_state;

  external ffi.Pointer<jpeg12_source_mgr> src;

  @JDIMENSION()
  external int image_width;

  @JDIMENSION()
  external int image_height;

  @ffi.Int()
  external int num_components;

  @ffi.Int32()
  external int jpeg12_color_space;

  @ffi.Int32()
  external int out_color_space;

  @ffi.UnsignedInt()
  external int scale_num;

  @ffi.UnsignedInt()
  external int scale_denom;

  @ffi.Double()
  external double output_gamma;

  @ffi.Int32()
  external int buffered_image;

  @ffi.Int32()
  external int raw_data_out;

  @ffi.Int32()
  external int dct_method;

  @ffi.Int32()
  external int do_fancy_upsampling;

  @ffi.Int32()
  external int do_block_smoothing;

  @ffi.Int32()
  external int quantize_colors;

  @ffi.Int32()
  external int dither_mode;

  @ffi.Int32()
  external int two_pass_quantize;

  @ffi.Int()
  external int desired_number_of_colors;

  @ffi.Int32()
  external int enable_1pass_quant;

  @ffi.Int32()
  external int enable_external_quant;

  @ffi.Int32()
  external int enable_2pass_quant;

  @JDIMENSION()
  external int output_width;

  @JDIMENSION()
  external int output_height;

  @ffi.Int()
  external int out_color_components;

  @ffi.Int()
  external int output_components;

  @ffi.Int()
  external int rec_outbuf_height;

  @ffi.Int()
  external int actual_number_of_colors;

  external JSAMPARRAY colormap;

  @JDIMENSION()
  external int output_scanline;

  @ffi.Int()
  external int input_scan_number;

  @JDIMENSION()
  external int input_iMCU_row;

  @ffi.Int()
  external int output_scan_number;

  @JDIMENSION()
  external int output_iMCU_row;

  external ffi.Pointer<ffi.Pointer<ffi.Int>> coef_bits;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<JQUANT_TBL>> quant_tbl_ptrs;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<JHUFF_TBL>> dc_huff_tbl_ptrs;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<JHUFF_TBL>> ac_huff_tbl_ptrs;

  @ffi.Int()
  external int data_precision;

  external ffi.Pointer<jpeg12_component_info> comp_info;

  @ffi.Int32()
  external int is_baseline;

  @ffi.Int32()
  external int progressive_mode;

  @ffi.Int32()
  external int arith_code;

  @ffi.Array.multi([16])
  external ffi.Array<UINT8> arith_dc_L;

  @ffi.Array.multi([16])
  external ffi.Array<UINT8> arith_dc_U;

  @ffi.Array.multi([16])
  external ffi.Array<UINT8> arith_ac_K;

  @ffi.UnsignedInt()
  external int restart_interval;

  @ffi.Int32()
  external int saw_JFIF_marker;

  @UINT8()
  external int JFIF_major_version;

  @UINT8()
  external int JFIF_minor_version;

  @UINT8()
  external int density_unit;

  @UINT16()
  external int X_density;

  @UINT16()
  external int Y_density;

  @ffi.Int32()
  external int saw_Adobe_marker;

  @UINT8()
  external int Adobe_transform;

  @ffi.Int32()
  external int color_transform;

  @ffi.Int32()
  external int CCIR601_sampling;

  external jpeg12_saved_marker_ptr marker_list;

  @ffi.Int()
  external int max_h_samp_factor;

  @ffi.Int()
  external int max_v_samp_factor;

  @ffi.Int()
  external int min_DCT_h_scaled_size;

  @ffi.Int()
  external int min_DCT_v_scaled_size;

  @JDIMENSION()
  external int total_iMCU_rows;

  external ffi.Pointer<JSAMPLE> sample_range_limit;

  @ffi.Int()
  external int comps_in_scan;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<jpeg12_component_info>> cur_comp_info;

  @JDIMENSION()
  external int MCUs_per_row;

  @JDIMENSION()
  external int MCU_rows_in_scan;

  @ffi.Int()
  external int blocks_in_MCU;

  @ffi.Array.multi([10])
  external ffi.Array<ffi.Int> MCU_membership;

  @ffi.Int()
  external int Ss;

  @ffi.Int()
  external int Se;

  @ffi.Int()
  external int Ah;

  @ffi.Int()
  external int Al;

  @ffi.Int()
  external int block_size;

  external ffi.Pointer<ffi.Int> natural_order;

  @ffi.Int()
  external int lim_Se;

  @ffi.Int()
  external int unread_marker;

  external ffi.Pointer<jpeg12_decomp_master> master;

  external ffi.Pointer<jpeg12_d_main_controller> main;

  external ffi.Pointer<jpeg12_d_coef_controller> coef;

  external ffi.Pointer<jpeg12_d_post_controller> post;

  external ffi.Pointer<jpeg12_input_controller> inputctl;

  external ffi.Pointer<jpeg12_marker_reader> marker;

  external ffi.Pointer<jpeg12_entropy_decoder> entropy;

  external ffi.Pointer<jpeg12_inverse_dct> idct;

  external ffi.Pointer<jpeg12_j12_upsampler> j12_upsample;

  external ffi.Pointer<jpeg12_color_deconverter> cconvert;

  external ffi.Pointer<jpeg12_j12_color_quantizer> cquantize;
}

class jpeg12_source_mgr extends ffi.Struct {
  external ffi.Pointer<JOCTET> next_input_byte;

  @ffi.Int()
  external int bytes_in_buffer;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(j12_decompress_ptr)>>
      j12_init_source;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Int32 Function(j12_decompress_ptr)>>
      j12_fill_input_buffer;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(j12_decompress_ptr, ffi.Long)>>
      j12_skip_input_data;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(j12_decompress_ptr, ffi.Int)>>
      j12_resync_to_restart;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(j12_decompress_ptr)>>
      j12_term_source;
}

typedef j12_decompress_ptr = ffi.Pointer<jpeg12_decompress_struct>;

class jpeg12_decomp_master extends ffi.Opaque {}

class jpeg12_d_main_controller extends ffi.Opaque {}

class jpeg12_d_coef_controller extends ffi.Opaque {}

class jpeg12_d_post_controller extends ffi.Opaque {}

class jpeg12_input_controller extends ffi.Opaque {}

class jpeg12_marker_reader extends ffi.Opaque {}

class jpeg12_entropy_decoder extends ffi.Opaque {}

class jpeg12_inverse_dct extends ffi.Opaque {}

class jpeg12_j12_upsampler extends ffi.Opaque {}

class jpeg12_color_deconverter extends ffi.Opaque {}

class jpeg12_j12_color_quantizer extends ffi.Opaque {}

typedef JSAMPIMAGE = ffi.Pointer<JSAMPARRAY>;
typedef jpeg12_marker_parser_method
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(j12_decompress_ptr)>>;

const int HAVE_PROTOTYPES = 1;

const int HAVE_UNSIGNED_CHAR = 1;

const int HAVE_UNSIGNED_SHORT = 1;

const int HAVE_STDDEF_H = 1;

const int HAVE_STDLIB_H = 1;

const int HAVE_LOCALE_H = 1;

const int BITS_IN_JSAMPLE = 12;

const int MAX_COMPONENTS = 10;

const int MAXJSAMPLE = 4095;

const int CENTERJSAMPLE = 2048;

const int JPEG12_MAX_DIMENSION = 65500;

const int JPEG12_LIB_VERSION = 90;

const int JPEG12_LIB_VERSION_MAJOR = 9;

const int JPEG12_LIB_VERSION_MINOR = 0;

const int DCTSIZE = 8;

const int DCTSIZE2 = 64;

const int NUM_QUANT_TBLS = 4;

const int NUM_HUFF_TBLS = 4;

const int NUM_ARITH_TBLS = 16;

const int MAX_COMPS_IN_SCAN = 4;

const int MAX_SAMP_FACTOR = 4;

const int C_MAX_BLOCKS_IN_MCU = 10;

const int D_MAX_BLOCKS_IN_MCU = 10;

const int JMSG_LENGTH_MAX = 200;

const int JMSG_STR_PARM_MAX = 80;

const int JPOOL_PERMANENT = 0;

const int JPOOL_IMAGE = 1;

const int JPOOL_NUMPOOLS = 2;

const int JPEG12_SUSPENDED = 0;

const int JPEG12_HEADER_OK = 1;

const int JPEG12_HEADER_TABLES_ONLY = 2;

const int JPEG12_REACHED_SOS = 1;

const int JPEG12_REACHED_EOI = 2;

const int JPEG12_ROW_COMPLETED = 3;

const int JPEG12_SCAN_COMPLETED = 4;

const int JPEG12_RST0 = 208;

const int JPEG12_EOI = 217;

const int JPEG12_APP0 = 224;

const int JPEG12_COM = 254;
